#block of code to make the condensed table
repos <- mutate(repos, created_at_format = format(as.Date(created_at), "%b %d %Y"))
table.data <- select(repos, owner.login, name, description, created_at_format, forks)
colnames(table.data) <- c("User", "Repo_Name", "Description", "Date_Created", "Forks")
```
# Here's a table showing `r user`'s repos.
`r kable(table.data)`
```{r echo=FALSE}
#block of code to make the summary table
summary.table <- group_by(repos, language) %>%
summarise(NumberOfRepos = n(), AverageForks = mean(forks))
```
### Here are the repo counts and average number of forks for each language
`r kable(summary.table)`
paste0(base, "/users/", user, "?", token)
```{r echo=FALSE, message=FALSE}
library(jsonlite)
library(dplyr)
library(knitr)
user <- "mbostock"
base <- "https://api.github.com"
token <- "access_token=b426acedb673750c7df4b9bed329a4f4ed195be6"
user.data <- fromJSON(paste0(base, "/users/", user, "?", token))
repo.url <- user.data$repos_url
#sorting by created, in descending order, with a max of 100 per page
repo.request <- paste0(repo.url, "?sort=created&order=desc&per_page=100")
repos <- fromJSON(paste0(repo.request, "&", token))
repos <- flatten(repos)
repos <- data.frame(repos)
#stores number of repositories returned
num.repos <- nrow(repos)
# stores the name of the repo with most forks.
most.popular <- repos$name[repos$forks == max(repos$forks)]
# avatar url
avatar <- repos$owner$avatar_url
```
#`r user` has **`r num.repos`** repositories.
###`r user`'s most popular repository is `r most.popular`.
![](`r repos$owner.avatar_url[1]`)
```{r echo=FALSE}
#block of code to make the condensed table
repos <- mutate(repos, created_at_format = format(as.Date(created_at), "%b %d %Y"))
table.data <- select(repos, owner.login, name, description, created_at_format, forks)
colnames(table.data) <- c("User", "Repo_Name", "Description", "Date_Created", "Forks")
```
# Here's a table showing `r user`'s repos.
`r kable(table.data)`
```{r echo=FALSE}
#block of code to make the summary table
summary.table <- group_by(repos, language) %>%
summarise(NumberOfRepos = n(), AverageForks = mean(forks))
```
### Here are the repo counts and average number of forks for each language
`r kable(summary.table)`
View(repos)
repos$created_at
as.Date(repos$created_at)
install.packages("plotly")
df <- data.frame(vec1, vec2)
variable <- plot_ly(data= midwest, x = ~percollege, color = ~state, type = "box")
library(plotly)
variable <- plot_ly(data= midwest, x = ~percollege, color = ~state, type = "box")
variable
vec1 <- c(1:10)
vec2 <- c(1,2,4,6,7,8,4,3,2,10)
# create a data frame of the two vectors
df <- data.frame(vec1, vec2)
data <- plot_ly(data = df, x = ~vec1, type = "scatter")
data
vec2 <- c(1,2,2,6,1,8,4,3,2,10)
data <- plot_ly(data = df, x = ~vec1, type = "scatter")
data
data <- plot_ly(data = df, x = ~vec1, y = ~vec2, type = "scatter")
data
vec1 <- c(1:10)
vec2 <- c(1,2,2,6,1,8,4,3,2,10)
data <- plot_ly(data = df, x = ~vec1, y = ~vec2, type = "scatter")
df <- data.frame(vec1, vec2)
# now create a basic scatterplot using the data frame you just created, passing it into
# a variable
data <- plot_ly(data = df, x = ~vec1, y = ~vec2, type = "scatter")
data
styled.scatterplot <- plot_ly(data = df, x = ~vec1, y = ~vec2, type = "scatter", marker = list(size = 10, color = "blue", line = list(color = "purple", width = 2)))
styled.scatterplot
styled.scatterplot %>%
layout(title = "Points", xaxis = list(zeroline = FALSE), yaxis = list(zeroline = FALSE))
styled.scatterplot
new <- styled.scatterplot %>%
layout(title = "Points", xaxis = list(zeroline = FALSE), yaxis = list(zeroline = FALSE))
new
new <- styled.scatterplot %>%
layout(title = "Points", xaxis = list(zeroline = FALSE), yaxis = list(zeroline = FALSE))
new
install.packages("shiny")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
get <- fromJSON("https://api.instagram.com/v1/users/lman95")
shiny::runApp('Desktop/shinya8')
data <- filter(iris, Species == input$species)  %>% select(input$atts)  # Selected Data
barplot(data)
data <- filter(iris, Species == 'setosa')
barplot(data)
barplot(iris)
barplot(5, width = data)
?t
t(iris)
barplot(t(data))
hist(data)
hist(data$Petal.Length)
hist(data$Petal.Length, Title = "Petal Length")
hist(data$Petal.Length, title = "Petal Length")
hist(data$Petal.Length, main = "Petal Length")
hist(data$Petal.Length, main = "Petal Length")
hist(data$Petal.Length, main = "Petal Length", xlab = Petal Length)
hist(data$Petal.Length, main = "Petal Length", xlab = "Petal Length")
library(ggplot2)
library(ggplot2)
data <- filter(iris, Species == 'setosa')
geom_histogram(data)
geom_histogram(data = data)
View(geom_histogram(data = data))
geom_histogram(data = data)
p <- geom_histogram(data = data)
p
p <- ggplot(data) + geom_histogram()
p
?aes
p <- ggplot(data, aes(Petal.Length)) + geom_histogram()
p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 10)
p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 15)
p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 4)
p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 5)
p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 50)
p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 50); p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 20); p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 18); p
View(data)
round(min(data$Petal.Length))
round(max(data$Petal.Length))
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 2); p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 19); p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 18); p
p <- ggplot(data, aes(Petal.Length)) + geom_histogram(bins = 15); p
p <- ggplot(data, aes(Petal.Width)) + geom_histogram(bins = 15); p
bw <- diff(range(data)) / (2 * IQR(data) / length(data)^(1/3))
data <- filter(iris, Species == 'setosa') %>% select(Sepal.Length, Sepal.Width, Petal.Length, Pedal.Width)
data <- filter(iris, Species == 'setosa') %>% select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
data <- filter(iris, Species == 'setosa') %>% select(-Species)
View(data)
library(ggplot2)
data <- filter(iris, Species == 'setosa') %>% select(-Species)
View(data)
bw <- diff(range(data)) / (2 * IQR(data) / length(data)^(1/3))
p <- ggplot(data, aes(Sepal.Width)) + geom_histogram(bins = 15); p
runApp('Desktop/shinya8')
output$irisPlot <- renderImage({
data <- filter(iris, Species == input$species) #Selected Data
# draw the histogram with the specified number of bins
p <- ggplot(data, aes(input$atts)) + geom_histogram(bins = 15)
####hist(data$Petal.Length, breaks = bins, col = 'darkgray', border = 'white')
})
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
hist(data$column, col = 'darkgray', border = 'white')
?hist
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
?if
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
data[1,]
data[,1]
runApp('Desktop/shinya8')
select(data, matches(pl))
pl = "Petal.Length"
select(data, matches(pl))
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
iris
runApp('Desktop/shinya8')
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, matches('Petal.Length')) #Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, matches('Petal.Length')); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, matches(pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, matches(pl)); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, contains(pl)); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, one_of(pl)); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, "pl"; my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, "pl"); my.data#Selected Data
pl = "Petal.Length"
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, "pl"); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select(-Species, contains(pl)); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_(-Species, pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_(-'Species', pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species', pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species', 'pl'); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species', pl); my.data#Selected Data
pl = "Petal.Length"
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species', pl); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species', 'Petal.Length'); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species', 'Petal.Length'); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species') %>% select('Petal.Length'); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species') %>% select_('Petal.Length'); my.data#Selected Data
my.data <- filter(iris, Species == 'setosa') %>% select_('-Species') %>% select_(pl); my.data#Selected Data
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
runApp('Desktop/shinya8')
View(iris)
runApp('Desktop/shinya8')
library(dplyr)
library(plyr)
# Factors - Apology and Reference | Levels - None and Explicit
# Dependent variables - Sincerity and Affect in likelihood to do business
df <- read.csv("clean_survey_data.csv")
df$participant = factor(df$participant)
df$Sincerity = factor(df$Sincerity)
df$biz.rate = factor(df$biz.rate)
df$apology = factor(df$apology)
df$reference = factor(df$reference)
contrasts(df$apology) <- "contr.sum"
contrasts(df$reference) <- "contr.sum"
contrasts(df$Sincerity) <- "contr.sum"
summary(df$sinc.rate[df$reference == 1 & df$apology == 1])
summary(df$sinc.rate[df$reference == 0 & df$apology == 1])
# Two-Way anova test
m = aov(Sincerity ~ apology * reference + Error(participant/(apology * reference), data=df))
setwd("~/Desktop")
read.csv("data/mjdata.csv")
read.csv("data/mjpurchase.csv")
mjdata <- read.csv("data/mjdata.csv")
mjpurchase <- read.csv("data/mjpurchase.csv")
View(mjdata)
View(mjpurchase)
behav <- read.csv("data/behav.csv")
demo <- read.csv("data/demo.csv")
health <- read.csv("data/health.csv")
View(demo)
View(behav)
View(health)
View(health)
library(ggplot2)
library(dplyr)
health <- read.csv("./data/health.csv")
health <- read.csv("info498/data/health.csv")
setwd("~/Desktop/info498")
health <- read.csv("./data/health.csv")
setwd("~/Desktop")
data <- read.table("nsduh_data.tsv", sep = '\t', header = TRUE)
table(apiclus1$dnum)
library(survey)
library(dplyr)
library(ggplot2)
data(api)
table(apiclus1$dnum)
table(apipop$dnum)
View(apiclus1)
prop.table(apiclus1$pw)
hist(apiclus1$pw)
hist(apiclus1$pw)
unique(apiclus1$pw)
hist(apiclus1$pw)
?api
nofpc.des <- svydesign(id=~dnum, weights=~pw, data=~apiclus1)
wts.fpc.des <- svydesign(id=~dnum, weights=~pw, fpc=~fpc, data=~apiclus1)
wts.fpc.des <- svydesign(id=~dnum, weights=~pw, fpc=~fpc, data=apiclus1)
nofpc.des <- svydesign(id=~dnum, weights=~pw, data=apiclus1)
no.wt.des <- svydesign(id=~dnum, fpc=~fpc, data=apiclus1)
svymean(wts.fpc.des)
svymean(api00, wts.fpc.des)
svymean(apiclus1$api00, wts.fpc.des)
svymean(apiclus1$api00, wts.fpc.des)
svymean(apiclus1$api00, nofpc.des)
svymean(apiclus1$api00, no.wt.des)
data <- read.table("nsduh_data.tsv", sep = '\t', header = TRUE)
data$ANALWT_C
?in
select(data$STATE)
library(dplyr)
select(data$STATE)
select(data, STATE)
select(data, SEGID)
select(data, SSREGION)
View(data)
View(mjdata)
?svydesign
svydesign
library(dplyr)
data$VESTR
weights.strata <- select(data, ANALWT_C, VESTR)
View(weights.strata)
weights.strata <- select(data, CASEID, ANALWT_C, VESTR)
View(weights.strata)
write.csv(weights.strata, "info498/data/weights.csv")
setwd("~/Desktop/info498")
health <- read.csv("./data/health.csv")
weights <- read.csv("./data/weights.csv")
View(weights)
h <- read.csv("./data/health.csv")
health <- left_join(h, weights, by = CASEID)
View(health)
health <- left_join(h, weights, by = "CASEID")
View(health)
health <- left_join(h, weights, by = c("CASEID", "X"))
View(health)
library(survey)
design <- svydesign(id=~1, strata=~VESTR, weights=~ANALWT_C , data=health)
design
?svytable
svytable
View(health)
prop.table(svytable(~DSTNRV30, design=design))
prop.table(svytable(~DSTNRV30, design=design))
nervous <- prop.table(svytable(~DSTNRV30, design=design))
nervous <- data.frame(prop.table(svytable(~DSTNRV30, design=design)))
View(nervous)
nervous <- data.frame(prop.table(svytable(~DSTNRV30, design=design)))
View(weights)
ggplot(nervous, aes(DSTNRV30, Freq)) + geom_bar() + coord_flip()
ggplot(nervous, aes(DSTNRV30, Freq)) + geom_bar(stat="identity") + coord_flip()
library(plotly)
?plot_ly
?ggplotly
mjdata <- read.csv("data/mjdata.csv")
library(dplyr)
View(mjdata)
users.only <- filter(mjdata, MJEVER == "(1) Yes")
View(users.only)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(MJAGE, MJREC, MJDAY30A)
demographics <- read.csv("data/demo.csv")
View(demographics)
select(demographics)
select(demographics, NEWRACE2, IRSEX, CATAG6)
demographics <- read.csv("data/demo.csv")
select(demographics, NEWRACE2, IRSEX, CATAG6)
bigdata <- read.table("~/Desktop/nsduh_data.tsv")
demo <- select(bigdata, colnames(demographics), NEWRACE2)
View(bigdata)
colnames(bigdata) = bigdata[1, ] # the first row will be the header
bigdata <- bigdata[-1, ]          # removing the first row.
View(bigdata)
bigdata <- read.table("~/Desktop/nsduh_data.tsv")
View(bigdata)
colnames(bigdata) <- bigdata[1, ] # the first row will be the header
View(bigdata)
bigdata[1,]
bigdata[2,]
bigdata[,1]
bigdata[3,]
bigdata <- read.table("nsduh_data.tsv", sep = '\t', header = TRUE)
bigdata <- read.table("~/Desktop/nsduh_data.tsv", sep = '\t', header = TRUE)
View(bigdata)
nr2 <- select(bigdata, NEWRACE2)
View(nr2)
nr2 <- select(bigdata, NEWRACE2, CASEID)
demo <- left_join(demographics, nr2, by = CASEID)
demo <- left_join(demographics, nr2, by = "CASEID")
View(demo)
write.csv(demo, "data/demo.csv")
demo <- read.csv("data/demo.csv")
mjdata <- read.csv("data/mjdata.csv")
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(MJAGE, MJREC, MJDAY30A)
View(users.only)
demographics <- read.csv("data/demo.csv")
mj.demo <- select(demographics, NEWRACE2, IRSEX, CATAG6)
nr2 <- select(bigdata, NEWRACE2, CATAG6, CASEID)
bigdata <- read.table("~/Desktop/nsduh_data.tsv", sep = '\t', header = TRUE)
nr2 <- select(bigdata, NEWRACE2, CATAG6, CASEID)
demographics <- read.csv("data/demo.csv")
nr2 <- select(bigdata, NEWRACE2, CATAG6, CASEID)
demo <- left_join(demographics, nr2, by = "CASEID")
write.csv(demo, "data/demo.csv")
select(demo, )
select(demo, CATAG6)
mjdata <- read.csv("data/mjdata.csv")
demographics <- read.csv("data/demo.csv")
mj.demo <- select(demographics, NEWRACE2, IRSEX, CATAG6)
View(demographics)
mjdata <- read.csv("data/mjdata.csv")
demographics <- read.csv("data/demo.csv")
mj.demo <- select(demographics, NEWRACE2, IRSEX, CATAG6)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(MJAGE, MJREC, MJDAY30A)
View(mjdata)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(MJAGE, MJREC, MJDAY30A) %>% left_join(mj.demo, by = "CASEID")
users.only <- left_join(users.only, mj.demo, by = "CASEID")
View(users.only)
users.only <- filter(mjdata, MJEVER == "(1) Yes")
%>% select(CASEID, MJAGE, MJREC, MJDAY30A)
users.only <- filter(mjdata, MJEVER == "(1) Yes");
%>% select(CASEID, MJAGE, MJREC, MJDAY30A)
users.only <- filter(mjdata, MJEVER == "(1) Yes") +
%>% select(CASEID, MJAGE, MJREC, MJDAY30A)
users.only <- filter(mjdata, MJEVER == "(1) Yes") +
%>% select(CASEID, MJAGE, MJREC, MJDAY30A) +
%>% left_join(users.only, mj.demo, by = "CASEID")
g <- ggplot()
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A) %>% left_join(users.only, mj.demo, by = "CASEID")
View(users.only)
mjdata <- read.csv("data/mjdata.csv")
demographics <- read.csv("data/demo.csv")
mj.demo <- select(demographics, NEWRACE2, IRSEX, CATAG6)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A) %>% left_join(users.only, mj.demo, by = "CASEID")
View(users.only)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A)
View(users.only)
users.only <- left_join(users.only, mj.demo, by = "CASEID")
mj.demo <- select(demographics, CASEID, NEWRACE2, IRSEX, CATAG6)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A)
users.only <- left_join(users.only, mj.demo, by = "CASEID")
View(users.only)
mj.demo <- select(demographics, CASEID, NEWRACE2, IRSEX, CATAG6)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A) %>% left_join(users.only, mj.demo, by = "CASEID")
View(users.only)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A) %>% left_join(users.only, mj.demo, by = "CASEID")
mjdata <- read.csv("data/mjdata.csv")
demographics <- read.csv("data/demo.csv")
mj.demo <- select(demographics, CASEID, NEWRACE2, IRSEX, CATAG6)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A) %>% left_join(users.only, mj.demo, by = "CASEID")
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A)
users.only <- left_join(users.only, mj.demo, by = "CASEID")
?hr
library(ploty)
library(shiny)
library(plotly)
mjdata <- read.csv("data/mjdata.csv")
demographics <- read.csv("data/demo.csv")
View(demographics)
demo <- select(demographics, NEWRACE2, IRSEX, CATAG6)
View(mjdata)
demo <- select(demographics, CASEID, NEWRACE2, IRSEX, CATAG6)
users.only <- filter(mjdata, MJEVER == "(1) Yes") %>% select(CASEID, MJAGE, MJREC, MJDAY30A)
users.only <- left_join(users.only, demo, by = "CASEID")
View(users.only)
nr2 <- select(bigdata, CASEID, EDUCCAT2, IRPINC3, IRFAMIN3)
View(nr2)
demographics <- read.csv("data/demo.csv")
select(demographics, EDUCCAT2, IRPINC3, IRFAMIN3)
select(demographics, IRPINC3, IRFAMIN3)
select(demographics, IRFAMIN3)
demo <- left_join(demographics, nr2, by = "CASEID")
View(demo)
write.csv(demo, "data/demo.csv")
g <- ggplot(users.only, aes(input$question)) + geom_bar(aes(colour = input$age))
ggplotly(g)
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
View(mjdata)
mjdata <- read.csv("../data/mjdata.csv")
mjdata <- read.csv("./data/mjdata.csv")
demographics <- read.csv("./data/demo.csv")
demo <- select(demographics, CASEID, NEWRACE2, IRSEX, CATAG6)
View(demo)
users.only <- select(CASEID, MJAGE, MJREC, MJDAY30A) %>% filter(mjdata, MJEVER == "(1) Yes")
View(users.only)
library(dplyr)
users.only <- select(CASEID, MJAGE, MJREC, MJDAY30A) %>% filter(mjdata, MJEVER == "(1) Yes")
mjdata <- read.csv("../data/mjdata.csv")
mjdata <- read.csv("./data/mjdata.csv")
demographics <- read.csv("./data/demo.csv")
demo <- select(demographics, CASEID, NEWRACE2, IRSEX, CATAG6)
users.only <- select(CASEID, MJAGE, MJREC, MJDAY30A) %>% filter(mjdata, MJEVER == "(1) Yes")
users.only <- select(mjdata, CASEID, MJAGE, MJREC, MJDAY30A) %>% filter(MJEVER == "(1) Yes")
users.only <- select(mjdata, CASEID, MJEVER, MJAGE, MJREC, MJDAY30A) %>% filter(MJEVER == "(1) Yes")
View(users.only)
users.only <- left_join(users.only, demo, by = "CASEID")
View(users.only)
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
?reactivePlot
runApp('Tab 2 (Landon)')
?plot_ly
plot_ly(users.only, x = input$question)
plot_ly(users.only, x = MJAGE) # input$question)
plot_ly(users.only, x = ~MJAGE) # input$question)
plot_ly(users.only, x = ~MJAGE, color = ~IRSEX) # input$question)
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
?reactive
?aes_string
diamons
diamonds
runApp('Tab 2 (Landon)')
diamonds
View(diamonds)
?selectInput
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
runApp('Tab 2 (Landon)')
